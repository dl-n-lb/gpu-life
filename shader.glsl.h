#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -i shader.glsl -o shader.glsl.h -l glsl330:glsl300es

    Overview:

        Shader program 'draw':
            Get shader desc: draw_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_vertex_pos = 0
            Fragment shader: fs_draw
                Uniform block 'draw_params':
                    C struct: draw_params_t
                    Bind slot: SLOT_draw_params = 0
                Image 'life':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_life = 0

        Shader program 'life':
            Get shader desc: life_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    ATTR_vs_vertex_pos = 0
            Fragment shader: fs_life
                Uniform block 'life_params':
                    C struct: life_params_t
                    Bind slot: SLOT_life_params = 0
                Image 'life':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_life = 0


    Shader descriptor structs:

        sg_shader draw = sg_make_shader(draw_shader_desc(sg_query_backend()));
        sg_shader life = sg_make_shader(life_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_vs_vertex_pos] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_life = 0;

    Bind slot and C-struct for uniform block 'draw_params':

        draw_params_t draw_params = {
            .resolution = ...;
            .scale_factor = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_draw_params, &SG_RANGE(draw_params));

    Bind slot and C-struct for uniform block 'life_params':

        life_params_t life_params = {
            .resolution = ...;
            .scale_factor = ...;
            .m_pos = ...;
            .add = ...;
            .run = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_life_params, &SG_RANGE(life_params));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_vs_vertex_pos (0)
#define SLOT_life (0)
#define SLOT_draw_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct draw_params_t {
    float resolution[2];
    float scale_factor[2];
} draw_params_t;
#pragma pack(pop)
#define SLOT_life_params (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct life_params_t {
    float resolution[2];
    float scale_factor[2];
    float m_pos[2];
    int add;
    int run;
} life_params_t;
#pragma pack(pop)
/*
    #version 330
    
    layout(location = 0) in vec4 vertex_pos;
    
    void main()
    {
        gl_Position = vertex_pos;
    }
    
*/
static const char vs_source_glsl330[104] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x70,
    0x6f,0x73,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 draw_params[1];
    uniform sampler2D life;
    
    layout(location = 0) out vec4 out_color;
    
    void main()
    {
        out_color = texture(life, gl_FragCoord.xy / draw_params[0].xy);
    }
    
*/
static const char fs_draw_source_glsl330[196] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x64,0x72,0x61,0x77,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x6c,0x69,0x66,
    0x65,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x34,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,
    0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2f,0x20,0x64,0x72,0x61,0x77,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    struct life_params
    {
        vec2 resolution;
        vec2 scale_factor;
        vec2 m_pos;
        int add;
        int run;
    };
    
    uniform life_params _23;
    
    uniform sampler2D life;
    
    layout(location = 0) out vec4 out_color;
    
    void main()
    {
        vec4 _131 = texture(life, (gl_FragCoord.xy / _23.resolution) * _23.scale_factor);
        vec4 _135 = texture(life, ((gl_FragCoord.xy + vec2(-1.0, 0.0)) / _23.resolution) * _23.scale_factor);
        vec4 _139 = texture(life, ((gl_FragCoord.xy + vec2(-1.0, 1.0)) / _23.resolution) * _23.scale_factor);
        vec4 _143 = texture(life, ((gl_FragCoord.xy + vec2(0.0, 1.0)) / _23.resolution) * _23.scale_factor);
        vec4 _147 = texture(life, ((gl_FragCoord.xy + vec2(1.0)) / _23.resolution) * _23.scale_factor);
        vec4 _151 = texture(life, ((gl_FragCoord.xy + vec2(1.0, 0.0)) / _23.resolution) * _23.scale_factor);
        vec4 _155 = texture(life, ((gl_FragCoord.xy + vec2(1.0, -1.0)) / _23.resolution) * _23.scale_factor);
        vec4 _159 = texture(life, ((gl_FragCoord.xy + vec2(0.0, -1.0)) / _23.resolution) * _23.scale_factor);
        vec4 _163 = texture(life, ((gl_FragCoord.xy + vec2(-1.0)) / _23.resolution) * _23.scale_factor);
        vec4 _180 = ((((((_135 + _139) + _143) + _147) + _151) + _155) + _159) + _163;
        float _183 = _180.x;
        out_color = _131;
        if (_23.run > 0)
        {
            if (_131.x > 0.0)
            {
                if (_183 < 2.0)
                {
                    out_color = vec4(0.0);
                }
                else
                {
                    if (_183 > 3.0)
                    {
                        out_color = vec4(0.0);
                    }
                    else
                    {
                        out_color = vec4(1.0);
                    }
                }
            }
            else
            {
                if (_183 == 3.0)
                {
                    out_color = vec4(1.0);
                }
                else
                {
                    out_color = vec4(0.0);
                }
            }
        }
        bool _223 = _23.add > 0;
        bool _238;
        if (_223)
        {
            _238 = length((_23.m_pos / _23.scale_factor) - gl_FragCoord.xy) <= 0.5;
        }
        else
        {
            _238 = _223;
        }
        if (_238)
        {
            out_color = vec4(1.0);
        }
    }
    
*/
static const char fs_life_source_glsl330[2179] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x6c,0x69,0x66,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x72,0x65,0x73,0x6f,
    0x6c,0x75,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,
    0x20,0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x6d,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x61,0x64,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x72,0x75,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x20,0x6c,0x69,0x66,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,
    0x20,0x5f,0x32,0x33,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,
    0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x6c,0x69,0x66,0x65,0x3b,0x0a,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x75,
    0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x31,0x33,0x31,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,
    0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x72,0x65,0x73,
    0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x73,
    0x63,0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x33,0x35,0x20,0x3d,0x20,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x28,0x67,0x6c,
    0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2b,0x20,
    0x76,0x65,0x63,0x32,0x28,0x2d,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,
    0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,
    0x6e,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,
    0x61,0x63,0x74,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x31,0x33,0x39,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,
    0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,
    0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,0x33,
    0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,
    0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x34,0x33,0x20,
    0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,
    0x28,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,
    0x79,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,
    0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,
    0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x34,0x20,0x5f,0x31,0x34,0x37,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,
    0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x28,0x67,0x6c,0x5f,0x46,0x72,
    0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2b,0x20,0x76,0x65,0x63,
    0x32,0x28,0x31,0x2e,0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x72,0x65,
    0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,
    0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x35,0x31,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x28,0x67,
    0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2b,
    0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,
    0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,
    0x6e,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,
    0x61,0x63,0x74,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x31,0x35,0x35,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,
    0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x31,
    0x2e,0x30,0x2c,0x20,0x2d,0x31,0x2e,0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,0x33,
    0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,
    0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x35,0x39,0x20,
    0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,
    0x28,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,
    0x79,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,0x20,0x2d,0x31,
    0x2e,0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,
    0x75,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,
    0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x36,0x33,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x28,0x67,0x6c,0x5f,0x46,
    0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2b,0x20,0x76,0x65,
    0x63,0x32,0x28,0x2d,0x31,0x2e,0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,
    0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,0x32,
    0x33,0x2e,0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x38,0x30,0x20,0x3d,
    0x20,0x28,0x28,0x28,0x28,0x28,0x28,0x5f,0x31,0x33,0x35,0x20,0x2b,0x20,0x5f,0x31,
    0x33,0x39,0x29,0x20,0x2b,0x20,0x5f,0x31,0x34,0x33,0x29,0x20,0x2b,0x20,0x5f,0x31,
    0x34,0x37,0x29,0x20,0x2b,0x20,0x5f,0x31,0x35,0x31,0x29,0x20,0x2b,0x20,0x5f,0x31,
    0x35,0x35,0x29,0x20,0x2b,0x20,0x5f,0x31,0x35,0x39,0x29,0x20,0x2b,0x20,0x5f,0x31,
    0x36,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,
    0x38,0x33,0x20,0x3d,0x20,0x5f,0x31,0x38,0x30,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x31,0x33,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x33,0x2e,0x72,
    0x75,0x6e,0x20,0x3e,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x31,0x2e,0x78,
    0x20,0x3e,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x31,0x38,0x33,0x20,0x3c,0x20,0x32,0x2e,0x30,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,
    0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x31,0x38,0x33,0x20,0x3e,0x20,0x33,0x2e,0x30,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,
    0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x31,0x38,0x33,0x20,0x3d,0x3d,0x20,0x33,0x2e,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,
    0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,
    0x32,0x32,0x33,0x20,0x3d,0x20,0x5f,0x32,0x33,0x2e,0x61,0x64,0x64,0x20,0x3e,0x20,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x32,0x33,0x38,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x32,0x33,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,
    0x33,0x38,0x20,0x3d,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x28,0x5f,0x32,0x33,
    0x2e,0x6d,0x5f,0x70,0x6f,0x73,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,
    0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x20,0x2d,0x20,0x67,0x6c,0x5f,
    0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x29,0x20,0x3c,0x3d,
    0x20,0x30,0x2e,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x5f,0x32,0x33,0x38,0x20,0x3d,0x20,0x5f,0x32,0x32,0x33,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,
    0x33,0x38,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 300 es
    
    layout(location = 0) in vec4 vertex_pos;
    
    void main()
    {
        gl_Position = vertex_pos;
    }
    
*/
static const char vs_source_glsl300es[107] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x65,
    0x72,0x74,0x65,0x78,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x70,0x6f,0x73,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 draw_params[1];
    uniform highp sampler2D life;
    
    layout(location = 0) out highp vec4 out_color;
    
    void main()
    {
        out_color = texture(life, gl_FragCoord.xy / draw_params[0].xy);
    }
    
*/
static const char fs_draw_source_glsl300es[263] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x64,0x72,0x61,0x77,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,
    0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x6c,0x69,0x66,0x65,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x34,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x67,0x6c,0x5f,
    0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2f,0x20,0x64,
    0x72,0x61,0x77,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x78,0x79,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    struct life_params
    {
        highp vec2 resolution;
        highp vec2 scale_factor;
        highp vec2 m_pos;
        int add;
        int run;
    };
    
    uniform life_params _23;
    
    uniform highp sampler2D life;
    
    layout(location = 0) out highp vec4 out_color;
    
    void main()
    {
        highp vec4 _131 = texture(life, (gl_FragCoord.xy / _23.resolution) * _23.scale_factor);
        highp vec4 _135 = texture(life, ((gl_FragCoord.xy + vec2(-1.0, 0.0)) / _23.resolution) * _23.scale_factor);
        highp vec4 _139 = texture(life, ((gl_FragCoord.xy + vec2(-1.0, 1.0)) / _23.resolution) * _23.scale_factor);
        highp vec4 _143 = texture(life, ((gl_FragCoord.xy + vec2(0.0, 1.0)) / _23.resolution) * _23.scale_factor);
        highp vec4 _147 = texture(life, ((gl_FragCoord.xy + vec2(1.0)) / _23.resolution) * _23.scale_factor);
        highp vec4 _151 = texture(life, ((gl_FragCoord.xy + vec2(1.0, 0.0)) / _23.resolution) * _23.scale_factor);
        highp vec4 _155 = texture(life, ((gl_FragCoord.xy + vec2(1.0, -1.0)) / _23.resolution) * _23.scale_factor);
        highp vec4 _159 = texture(life, ((gl_FragCoord.xy + vec2(0.0, -1.0)) / _23.resolution) * _23.scale_factor);
        highp vec4 _163 = texture(life, ((gl_FragCoord.xy + vec2(-1.0)) / _23.resolution) * _23.scale_factor);
        highp vec4 _180 = ((((((_135 + _139) + _143) + _147) + _151) + _155) + _159) + _163;
        highp float _183 = _180.x;
        out_color = _131;
        if (_23.run > 0)
        {
            if (_131.x > 0.0)
            {
                if (_183 < 2.0)
                {
                    out_color = vec4(0.0);
                }
                else
                {
                    if (_183 > 3.0)
                    {
                        out_color = vec4(0.0);
                    }
                    else
                    {
                        out_color = vec4(1.0);
                    }
                }
            }
            else
            {
                if (_183 == 3.0)
                {
                    out_color = vec4(1.0);
                }
                else
                {
                    out_color = vec4(0.0);
                }
            }
        }
        bool _223 = _23.add > 0;
        bool _238;
        if (_223)
        {
            _238 = length((_23.m_pos / _23.scale_factor) - gl_FragCoord.xy) <= 0.5;
        }
        else
        {
            _238 = _223;
        }
        if (_238)
        {
            out_color = vec4(1.0);
        }
    }
    
*/
static const char fs_life_source_glsl300es[2324] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x6c,0x69,0x66,0x65,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x73,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x32,0x20,0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x73,0x63,
    0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x6d,0x5f,0x70,0x6f,0x73,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x61,0x64,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x72,0x75,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x6c,0x69,0x66,0x65,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x20,0x5f,0x32,0x33,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,
    0x44,0x20,0x6c,0x69,0x66,0x65,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x75,0x74,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x33,0x31,0x20,0x3d,0x20,0x74,0x65,0x78,
    0x74,0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x67,0x6c,0x5f,0x46,
    0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2f,0x20,0x5f,0x32,
    0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,
    0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x5f,0x31,0x33,0x35,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,
    0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,
    0x2d,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,
    0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,
    0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x5f,0x31,0x33,0x39,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,
    0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,
    0x2d,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,
    0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,
    0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x5f,0x31,0x34,0x33,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,
    0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,0x33,
    0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,
    0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,
    0x20,0x5f,0x31,0x34,0x37,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,
    0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x31,
    0x2e,0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,
    0x75,0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,
    0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x35,0x31,0x20,
    0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,
    0x28,0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,
    0x79,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,
    0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,
    0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x35,0x35,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,
    0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,
    0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x31,0x2e,0x30,0x2c,0x20,0x2d,0x31,0x2e,
    0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,
    0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,
    0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x35,0x39,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,
    0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,
    0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x2c,0x20,0x2d,0x31,0x2e,
    0x30,0x29,0x29,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,
    0x74,0x69,0x6f,0x6e,0x29,0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,
    0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x36,0x33,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x6c,0x69,0x66,0x65,0x2c,0x20,0x28,
    0x28,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,
    0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x2d,0x31,0x2e,0x30,0x29,0x29,0x20,0x2f,
    0x20,0x5f,0x32,0x33,0x2e,0x72,0x65,0x73,0x6f,0x6c,0x75,0x74,0x69,0x6f,0x6e,0x29,
    0x20,0x2a,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,
    0x74,0x6f,0x72,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x34,0x20,0x5f,0x31,0x38,0x30,0x20,0x3d,0x20,0x28,0x28,0x28,0x28,
    0x28,0x28,0x5f,0x31,0x33,0x35,0x20,0x2b,0x20,0x5f,0x31,0x33,0x39,0x29,0x20,0x2b,
    0x20,0x5f,0x31,0x34,0x33,0x29,0x20,0x2b,0x20,0x5f,0x31,0x34,0x37,0x29,0x20,0x2b,
    0x20,0x5f,0x31,0x35,0x31,0x29,0x20,0x2b,0x20,0x5f,0x31,0x35,0x35,0x29,0x20,0x2b,
    0x20,0x5f,0x31,0x35,0x39,0x29,0x20,0x2b,0x20,0x5f,0x31,0x36,0x33,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x38,0x33,0x20,0x3d,0x20,0x5f,0x31,0x38,0x30,0x2e,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x31,
    0x33,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x33,0x2e,
    0x72,0x75,0x6e,0x20,0x3e,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x31,0x2e,
    0x78,0x20,0x3e,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x31,0x38,0x33,0x20,0x3c,0x20,0x32,0x2e,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,
    0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x38,0x33,0x20,0x3e,0x20,0x33,0x2e,0x30,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x31,0x38,0x33,0x20,0x3d,0x3d,0x20,0x33,0x2e,0x30,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,
    0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x30,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,
    0x5f,0x32,0x32,0x33,0x20,0x3d,0x20,0x5f,0x32,0x33,0x2e,0x61,0x64,0x64,0x20,0x3e,
    0x20,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x32,0x33,
    0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x32,0x33,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,
    0x32,0x33,0x38,0x20,0x3d,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x28,0x5f,0x32,
    0x33,0x2e,0x6d,0x5f,0x70,0x6f,0x73,0x20,0x2f,0x20,0x5f,0x32,0x33,0x2e,0x73,0x63,
    0x61,0x6c,0x65,0x5f,0x66,0x61,0x63,0x74,0x6f,0x72,0x29,0x20,0x2d,0x20,0x67,0x6c,
    0x5f,0x46,0x72,0x61,0x67,0x43,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x29,0x20,0x3c,
    0x3d,0x20,0x30,0x2e,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x32,0x33,0x38,0x20,0x3d,0x20,0x5f,0x32,0x32,0x33,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x32,0x33,0x38,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6f,0x75,0x74,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before shader.glsl.h"
#endif
static inline const sg_shader_desc* draw_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "vertex_pos";
      desc.vs.source = vs_source_glsl330;
      desc.vs.entry = "main";
      desc.fs.source = fs_draw_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "draw_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "life";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "vertex_pos";
      desc.vs.source = vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = fs_draw_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 16;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "draw_params";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.images[0].name = "life";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "draw_shader";
    }
    return &desc;
  }
  return 0;
}
static inline const sg_shader_desc* life_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "vertex_pos";
      desc.vs.source = vs_source_glsl330;
      desc.vs.entry = "main";
      desc.fs.source = fs_life_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "_23.resolution";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT2;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[1].name = "_23.scale_factor";
      desc.fs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_FLOAT2;
      desc.fs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[2].name = "_23.m_pos";
      desc.fs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_FLOAT2;
      desc.fs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[3].name = "_23.add";
      desc.fs.uniform_blocks[0].uniforms[3].type = SG_UNIFORMTYPE_INT;
      desc.fs.uniform_blocks[0].uniforms[3].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[4].name = "_23.run";
      desc.fs.uniform_blocks[0].uniforms[4].type = SG_UNIFORMTYPE_INT;
      desc.fs.uniform_blocks[0].uniforms[4].array_count = 1;
      desc.fs.images[0].name = "life";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "life_shader";
    }
    return &desc;
  }
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "vertex_pos";
      desc.vs.source = vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = fs_life_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.uniform_blocks[0].uniforms[0].name = "_23.resolution";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT2;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[1].name = "_23.scale_factor";
      desc.fs.uniform_blocks[0].uniforms[1].type = SG_UNIFORMTYPE_FLOAT2;
      desc.fs.uniform_blocks[0].uniforms[1].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[2].name = "_23.m_pos";
      desc.fs.uniform_blocks[0].uniforms[2].type = SG_UNIFORMTYPE_FLOAT2;
      desc.fs.uniform_blocks[0].uniforms[2].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[3].name = "_23.add";
      desc.fs.uniform_blocks[0].uniforms[3].type = SG_UNIFORMTYPE_INT;
      desc.fs.uniform_blocks[0].uniforms[3].array_count = 1;
      desc.fs.uniform_blocks[0].uniforms[4].name = "_23.run";
      desc.fs.uniform_blocks[0].uniforms[4].type = SG_UNIFORMTYPE_INT;
      desc.fs.uniform_blocks[0].uniforms[4].array_count = 1;
      desc.fs.images[0].name = "life";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "life_shader";
    }
    return &desc;
  }
  return 0;
}
